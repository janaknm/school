(defparameter *dimension* 3)
(defparameter *neighbors* 5)

(defun read-data (path)
  (let ((acc nil))
    (with-open-file (str path :direction :input)
      (loop for line = (read-line str nil :eof) 
         until (eql :eof line) do
           (let ((words (split-by line #\Space)))
             (push (cons (car words)
                         (apply #'vector (mapcar #'read-from-string (cdr words))))
                   acc)))
         acc))))

(defun split-by (string char)
  (loop for i = 0 then (1+ j)
     as j = (position char string :start i)
     collect (subseq string i j)
     while j))

(defun dist (v1 v2)
  (apply #'+ (loop for i from 0 to (1- *dimension*)
                  collect (sq (- (svref v2 i) (svref v1 i))))))

(defmacro sq (x)
  (let ((s (gensym)))
    `(let ((,s ,x))
       (* ,s ,s))))