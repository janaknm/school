f = Function[{days, bprice, mprice},
(* Initialize sizes *)
rows = 2*days;
cols = 5*days; (* redundant variables, oh well, way easier to index *)
A = Table[0, {i,1,rows}, {j,1,cols}];
b = Table[{0,0}, {i, 1, rows}];
c = Table[0, {i, 1, cols}];
u = {110, 100, 160, 120, 180, 200, 120};

(* Build A *)
(* b_i @ [row, i] 'bought' *)
(* l_i @ [row, days + i] 'leftover' *)
(* o_i @ [row, (2*days) + i] 'one-day started on' *)
(* t_i @ [row, (3*days) + i] 'two-day started on' *)
For[i=1, i<= days, i++,
ix = (i-1)*2 +1;
weekend = Mod[i,6] == 0 ||Mod[i,7]==0;
needed = u[[Mod[i-1,7]+1]];

A[[ix, i]] = 1; (* b_i *)
A[[ix, days+i]] = -1; (* c_i *)
A[[ix, days+i-1]] = If[i >1,1,0]; (* c_ (i-1) *)
A[[ix, (3*days)+i]] = If[i>=3,1,0];  (* o_i *)
A[[ix, (4*days)+i]] = If[i>=4,1,0]; (* t_i *)

A[[ix+1, i]] = 1; (* b_i *)
A[[ix+1, (2*days)+i]] = -1; (* d_i *)
A[[ix+1, (2*days)+i-1]] = If[i>1,1,0]; (* d_ (i-1) *)
A[[ix+1, (3*days)+i]] = If[i<=days-2,-1,0]; (* o_i *)
A[[ix+1, (4*days) +i]] = If[i<=days-3 && !weekend,-1,0]; (* t_i *)

b[[ix]] = {needed, 0};
b[[ix+1]] = {0,0};

c[[i]] = 8;
c[[3*days+i]] = bprice;
c[[4*days+i]] = mprice;
];

xsol= LinearProgramming[c, A, b];
Print["total cost: ", c.xsol];
For[i=1, i<=days, i++,
Print["day ", i, 
	" - buy: ", xsol[[i]], 
	", send to bud: ", xsol[[3*days+i]],
	", send to mac: ", xsol[[4*days+i]]];
];
Print[xsol];
A // MatrixForm
];

f[7,3,1]

During evaluation of In[90]:= total cost: 2955
During evaluation of In[90]:= day 1 - buy: 110, send to bud: 0, send to mac: 0
During evaluation of In[90]:= day 2 - buy: 135, send to bud: 0, send to mac: 0
During evaluation of In[90]:= day 3 - buy: 0, send to bud: 125, send to mac: 0
During evaluation of In[90]:= day 4 - buy: 0, send to bud: 0, send to mac: 120
During evaluation of In[90]:= day 5 - buy: 0, send to bud: 0, send to mac: 500
During evaluation of In[90]:= day 6 - buy: 0, send to bud: 0, send to mac: 0
During evaluation of In[90]:= day 7 - buy: 0, send to bud: 0, send to mac: 0
During evaluation of In[90]:= {110,135,0,0,0,0,0,0,35,0,0,320,120,0,110,245,120,0,0,0,0,0,0,125,0,0,0,0,0,0,0,120,500,0,0}
Out[91]//MatrixForm= (1	0	0	0	0	0	0	-1	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
1	0	0	0	0	0	0	0	0	0	0	0	0	0	-1	0	0	0	0	0	0	-1	0	0	0	0	0	0	-1	0	0	0	0	0	0
0	1	0	0	0	0	0	1	-1	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
0	1	0	0	0	0	0	0	0	0	0	0	0	0	1	-1	0	0	0	0	0	0	-1	0	0	0	0	0	0	-1	0	0	0	0	0
0	0	1	0	0	0	0	0	1	-1	0	0	0	0	0	0	0	0	0	0	0	0	0	1	0	0	0	0	0	0	0	0	0	0	0
0	0	1	0	0	0	0	0	0	0	0	0	0	0	0	1	-1	0	0	0	0	0	0	-1	0	0	0	0	0	0	-1	0	0	0	0
0	0	0	1	0	0	0	0	0	1	-1	0	0	0	0	0	0	0	0	0	0	0	0	0	1	0	0	0	0	0	0	1	0	0	0
0	0	0	1	0	0	0	0	0	0	0	0	0	0	0	0	1	-1	0	0	0	0	0	0	-1	0	0	0	0	0	0	-1	0	0	0
0	0	0	0	1	0	0	0	0	0	1	-1	0	0	0	0	0	0	0	0	0	0	0	0	0	1	0	0	0	0	0	0	1	0	0
0	0	0	0	1	0	0	0	0	0	0	0	0	0	0	0	0	1	-1	0	0	0	0	0	0	-1	0	0	0	0	0	0	0	0	0
0	0	0	0	0	1	0	0	0	0	0	1	-1	0	0	0	0	0	0	0	0	0	0	0	0	0	1	0	0	0	0	0	0	1	0
0	0	0	0	0	1	0	0	0	0	0	0	0	0	0	0	0	0	1	-1	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
0	0	0	0	0	0	1	0	0	0	0	0	1	-1	0	0	0	0	0	0	0	0	0	0	0	0	0	1	0	0	0	0	0	0	1
0	0	0	0	0	0	1	0	0	0	0	0	0	0	0	0	0	0	0	1	-1	0	0	0	0	0	0	0	0	0	0	0	0	0	0

)
