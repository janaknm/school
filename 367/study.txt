***NETWORK LAYER***

ICMP (Internet Control Message Protocol) One of the IP protocols that
     is usually used by the operating system to send error messages or
     control issues. Not usually used to for transporting any sort of
     data, just a "heads up."

DHCP (Dynamic Host Configuration Protocol) Hosts do not have an IP
address intrinsically assigned to them, but still need one in order to
operate. Similary to ARP, when a host needs an IP address it sends a
broadcast packet out on it's server hoping that it reaches the DHCP
server. This DHCP server finds an available IP address and leases it
out to that host. It is returned to the ethernet address that should
have been on the host's request packet.



    
***TRANSPORT LAYER***

A more "abstract" version of the network layer. It's job is still to
move packets across the network, but is now dealing soley with
end-to-end hosts. The network layer is concerned with moving the
packet through routers and is really just looking one step ahead at
all times, while the transport layer is all about the "end result" of
this communication. Since it is handling end-to-end connections, it
can create "virtual circuits" which should be a reliable two-way
stream through the network. When packets drop or have errors, it's the
transport layer's job to get a retransmitted version and provide this
flow to the application layer.

Goals of the transport layer are to be a reliable and efficient system
of communication over an unreliable network. Applications should be
able to use the transport layer without dealing with problems that can
be solved independently of the software; these should be fixed before
the application sees anything.

Elements of the transport layer are error detection/control, virtual
connection creation/tear down, ordering packets, flow control, and
multiplexing connections to applications.

Addressing in the transport layer is usually used in conjunction with
the network address. In the IP, ports are used as transport layer
addresses. Some applications use "well-known ports" that clients can
simply assume the service to be running on. When the TL address (port)
is subject to change, other methods like a portmapper can be used. A
portmapper lives on a port/many ports and allows for host services to
"register" with it, giving them some port to use. Then clients that
want to connect to the host can consult the portmapper to get the
current address of the service. An extension of this idea is the
generic "process server" (e.g. inetd) also called "superserver." These
superservers listen on all transport addresses and an incoming
connection is mapped to a service. Superserver then starts up that
process to handle the client, and shuts it down afterwards. This way
not all services need to be run at the same time, although some
should.

Virtual circuits or connections are the presentation of a seemingly
reliable host-to-host connection over the network (in comparison to
circuits in telephones). Successfuly starting one of these connections
is a pretty tough problem to start with. It is completely impossible
to guarantee without a doubt that both parties have shaken hands and
have set up the connection. The closest solution is the 3-way
handshake. A client makes a CONNECT request. Server acknowledges this
and sends a connection ID. When the client receives this ID, it knows
the server has made the connection and they can start
communicating. Now the client can use that ID to identify itself to
the server when sending data. Shutting down the connectin uses the
same 3-way handshaking to allow both client and server to know that
they successfuly ended the connection.

Error control in the transport layer works similarly to the way the
network layer does. Either a CRC or checksum is done to ensure that
the data is correct; network layer handles the headers and the
transport layer checks the data. Another issue is the sequence in
which data packets arrive. Since each packet takes a different path
through the network, they may end up out of order. This is handled
easily by appending sequence numbers to each packet. 

Flow control is needed to assure that the sender does not overwhelm
the receiver with packets too quickly. In contrast to the network
layer, the transport layer is concerned with the whole path, not
individual hops across the network. Buffer size is not simply set to
some agreed upon value, the limit is found by cautiously starting out
with a small buffer and ramping it up each time the receiver gets it
successfuly. If packets are dropped, that implies congestion, so the
sender will back off a bit. The trouble with this technique is that
wireless connections are much more prone to packets being dropped -
even when there is no congestion. Transport layers will simply assume
that the network is congested and operate at a crawl. A way around
this is to handle wireless networks as a special case, and allow the
link layer to retransmit without bubbling all the way back up to the
transport layer.

Transport layer protocols: TCP and UDP. UDP is connectionless and
message oriented... like the post office! It's a "best effort"
mechanism that is not guaranteed to be delivered, and you won't get
any acknowledgemt if it got there or not. On the other hand, TCP is a
connection-oriented protocol that should make some guarantees about
reliability. TCP uses a sliding window technique to get data
across. Congestion control is accomplished by starting slowly and only
using a small portion of the available window size, slowly increasing
that until you hit a wall. 


***APPLICATION LAYER***

DNS (Domain Name System) Maps IP numbers to names. It was invented
when the number of ip addresses became completely unmanageable when
not automating organization of them. dns_lookup() uses DNS
to... lookup a domain name from an IP address. Nameservers are a
"distributed database" which designates different servers for each
domain and subdomain. This way, there aren't huge bottlenecks where
everyone is asking the same servers for information.

x.y.z.t.d -> ask root server for _server_ domain .d
          -> ask returned server for _server_ domain t.d
          -> ask returned server for _server_ z.t.d
          -> ask for _server_ y.z.t.d
          -> ask for _host_ x.y.z.t.d

          (host address returned at end of the line)

There are also different records DNS can store such as: A records
which map a name to and address, MX records for where to send email,
etc.

Email - Pretty straightforward, mailbox designated by first name
before the '@' character. A message is composed of a header and then a
body. Using base 64 encoding, any file can be sent over ASCII plain
text allowing email to transfer any file. Mimetypes denote the type of
file being transferred over base 64, so the receiver knows how to put
the resulting file back together or decompress.

***NETWORK SECURITY** 

Network security should be placed on all levels
of the stack. This gives the finest grain of control, as each layer
can secure specifically based on it's job. 

Cryptography, "secret writing," is a basic technique for network
security. A cipher is a character-for-character and sometimes
bit-by-bit replacement, while a code replaces words for words. Basic
notation is as follows: 

    P -> plain text (original)
    C -> cipher text (encrypted)
    E -> encryption method
    KE -> key for encryption
    D -> decryption method
    KD -> key for decryption
    
    formulas: C = E(P, KE)
              P = D(C, KD)

There are different kinds of intruders. Passive intruders simply
listen to the ciphertext and try to figure it out that way. On the
other hand, active intruders intercept and alter messages in order to
get more information out of what's being said.
